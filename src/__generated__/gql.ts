/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation CreateActivityGoalMutation($createActivityGoalInput: CreateActivityGoalInput!) {\n    createActivityGoal(createActivityGoalInput: $createActivityGoalInput) {\n      dashboardId\n      numberOfEvents\n    }\n  }\n": types.CreateActivityGoalMutationDocument,
    "\n  mutation CreateBudgetGoalMutation($createBudgetGoalInput: CreateBudgetGoalInput!) {\n    createBudgetGoal(createBudgetGoalInput: $createBudgetGoalInput) {\n        id\n        dashboardId\n        value\n        currency\n        recurring\n        recurringRepeat\n        createdAt\n        updatedAt\n    }\n  }\n": types.CreateBudgetGoalMutationDocument,
    "\n  mutation CreateDashboardMutation($createDashboardInput: CreateDashboardInput!) {\n    createDashboard(createDashboardInput: $createDashboardInput) {\n      id\n      name\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateDashboardMutationDocument,
    "\n  mutation CreateExpense ($createExpenseInput: CreateExpenseInput!) {\n    createExpense (createExpenseInput: $createExpenseInput) {\n      amount\n      category\n      createdAt\n      dashboardId\n      id\n      name\n      recurringRepeat\n      updatedAt\n    }\n  }\n": types.CreateExpenseDocument,
    "\nmutation CreateCustomerFunnelStage($createCustomerFunnelStageInput: [CreateCustomerFunnelStageInput!]!) {\n  createCustomerFunnelStage(createCustomerFunnelStageInput: $createCustomerFunnelStageInput) {\n    dashboardId\n    id\n  }\n}\n": types.CreateCustomerFunnelStageDocument,
    "\nmutation CreateOrganization($createOrganizationInput: CreateOrganizationInput!) {\n\t\tcreateOrganization(createOrganizationInput: $createOrganizationInput) {\n\t\tid,\n\t\tuserId,\n\t\tname\n\t}\n}\n": types.CreateOrganizationDocument,
    "\nmutation CreatePermission($createPermissionInput: CreatePermissionInput!) {\n  createPermission(createPermissionInput: $createPermissionInput) {\n    id\n  }\n}\n": types.CreatePermissionDocument,
    "\n    mutation CreateWebsite($createWebsiteInput: CreateWebsiteInput!) {\n        createWebsite(createWebsiteInput: $createWebsiteInput) {\n            organizationId\n\t\t    name\n\t\t    domain\n            id\n        }\n    }\n": types.CreateWebsiteDocument,
    "\n    mutation DeleteOrganizationImage($deleteOrganizationImageInput: DeleteOrganizationImageInput!) {\n        deleteOrganizationImage(deleteOrganizationImageInput: $deleteOrganizationImageInput) {\n            id\n        }\n    }\n": types.DeleteOrganizationImageDocument,
    "\n    mutation DeleteUserImage($deleteUserImageInput: DeleteUserImageInput!) {\n        deleteUserImage(deleteUserImageInput: $deleteUserImageInput) {\n            id\n        }\n    }\n": types.DeleteUserImageDocument,
    "\n    mutation DeleteWebsiteImage($deleteWebsiteImageInput: DeleteWebsiteImageInput!) {\n        deleteWebsiteImage(deleteWebsiteImageInput: $deleteWebsiteImageInput) {\n            id\n        }\n    }\n": types.DeleteWebsiteImageDocument,
    "\nmutation UpdatePermission($updatePermissionInput: UpdatePermissionInput!) {\n  updatePermission(updatePermissionInput: $updatePermissionInput) {\n    id\n  }\n}\n": types.UpdatePermissionDocument,
    "\n  mutation SendConnectionsRecommendationEmail($sendConnectionsRecommendationEmailInput: SendConnectionsRecommendationEmailInput!) {\n    sendConnectionsRecommendationEmail(sendConnectionsRecommendationEmailInput: $sendConnectionsRecommendationEmailInput)\n  }\n": types.SendConnectionsRecommendationEmailDocument,
    "\n  mutation SendShareALinkSetupEmail($sendShareALinkSetupEmailInput: SendShareALinkSetupEmailInput!) {\n    sendShareALinkSetupEmail(sendShareALinkSetupEmailInput: $sendShareALinkSetupEmailInput)\n  }\n": types.SendShareALinkSetupEmailDocument,
    "\n  mutation RemoveActivityGoalMutation($id: UUID!) {\n    removeActivityGoal(id: $id)\n  }\n": types.RemoveActivityGoalMutationDocument,
    "\n  mutation RemoveBudgetGoalMutation($id: UUID!) {\n    removeBudgetGoal(id: $id)\n  }\n": types.RemoveBudgetGoalMutationDocument,
    "\n    mutation RemoveDashboard($dashboardId: UUID!) {\n        removeDashboard(id: $dashboardId)\n    }\n": types.RemoveDashboardDocument,
    "\n    mutation RemovePermissions($removePermissionId: UUID!) {\n        removePermission(id: $removePermissionId)\n    }\n": types.RemovePermissionsDocument,
    "\n    mutation RemoveWebsite($websiteId: UUID!) {\n        removeWebsite(id: $websiteId)\n    }\n": types.RemoveWebsiteDocument,
    "\n  mutation SetCurrentOnboardingPath($currentOnboardingPath: String) {\n    setCurrentOnboardingPath(\n      currentOnboardingPath: $currentOnboardingPath\n    ) {\n      id\n      currentOnboardingPath\n      createdAt\n      updatedAt\n    }\n  }\n": types.SetCurrentOnboardingPathDocument,
    "\n  mutation UpdateActivityGoalMutation($updateActivityGoalInput: UpdateActivityGoalInput!) {\n    updateActivityGoal(updateActivityGoalInput: $updateActivityGoalInput) {\n      customerFunnelStageId\n      dashboardId\n      id\n      numberOfEvents\n    }\n  }\n": types.UpdateActivityGoalMutationDocument,
    "\n  mutation Mutation($updateBudgetGoalInput: UpdateBudgetGoalInput!) {\n    updateBudgetGoal(updateBudgetGoalInput: $updateBudgetGoalInput) {\n        recurring\n        currency\n        dashboardId\n        id\n        recurringRepeat\n        value\n    }\n  }\n": types.MutationDocument,
    "\nmutation UpdateDashboard($updateDashboardInput: UpdateDashboardInput!) {\n    updateDashboard(updateDashboardInput: $updateDashboardInput){\n    id\n    name,\n    websiteId,\n    createdAt\n    updatedAt\n  }\n}\n": types.UpdateDashboardDocument,
    "\nmutation UpdateFunnelStage($updateCustomerFunnelStageInput: UpdateCustomerFunnelStageInput!) {\n\tupdateCustomerFunnelStage(updateCustomerFunnelStageInput: $updateCustomerFunnelStageInput) {\n\t\tdashboardId,\n\t\tid\n\t\tname\n\t\tcustomerFunnelStageEvents {\n\t\t\tid\n\t\t\tcustomerFunnelStageId\n\t\t\tname\n\t\t\teventType\n\t\t\tcustomerFunnelStageEventConditions {\n\t\t\t\tid\n\t\t\t\tcustomerFunnelStageEventId\n\t\t\t\tpageUrl\n\t\t\t\tvisitorType\n\t\t\t\tstartingUrl\n\t\t\t\tstartingUrlCondition\n\t\t\t\tdestinationUrl\n\t\t\t\tdestinationUrlCondition\n\t\t\t}\n\t\t}\n\t\tcreatedAt\n\t\tupdatedAt\n\t}\n}\n": types.UpdateFunnelStageDocument,
    "\nmutation updateOrganization($updateOrganizationInput: UpdateOrganizationInput!) {\n\t\tupdateOrganization(updateOrganizationInput: $updateOrganizationInput) {\n\t\tid,\n\t\tuserId,\n\t\tname\n\t}\n}\n": types.UpdateOrganizationDocument,
    "\nmutation UpdateUser($updateUserInput: UpdateUserInput!) {\n  updateUser(updateUserInput: $updateUserInput) {\n    id\n    email\n    firstName\n    lastName\n    companyRoleId\n    createdAt\n    updatedAt\n  }\n}\n": types.UpdateUserDocument,
    "\nmutation UpdateWebsite($updateWebsiteInput: UpdateWebsiteInput!) {\n\t\tupdateWebsite(updateWebsiteInput: $updateWebsiteInput) {\n\t\tid,\n\t\torganizationId,\n\t\tname,\n\t\tdomain,\n\t\tdescription\n\t}\n}\n": types.UpdateWebsiteDocument,
    "\n    mutation UploadOrganizationImage($uploadOrganizationImageInput: UploadOrganizationImageInput!) {\n        uploadOrganizationImage(uploadOrganizationImageInput: $uploadOrganizationImageInput) {\n            id,\n            imageUrl\n        }\n    }\n": types.UploadOrganizationImageDocument,
    "\n    mutation UploadUserImage($uploadUserImageInput: UploadUserImageInput!) {\n        uploadUserImage(uploadUserImageInput: $uploadUserImageInput) {\n            id,\n            imageUrl\n        }\n    }\n": types.UploadUserImageDocument,
    "\n    mutation UploadWebsiteImage($uploadWebsiteImageInput: UploadWebsiteImageInput!) {\n        uploadWebsiteImage(uploadWebsiteImageInput: $uploadWebsiteImageInput) {\n            id,\n            imageUrl\n        }\n    }\n": types.UploadWebsiteImageDocument,
    "\nmutation UpsertCustomerFunnelStage($upsertCustomerFunnelStageInput: [UpsertCustomerFunnelStageInput!]!) {\n  upsertCustomerFunnelStage(upsertCustomerFunnelStageInput: $upsertCustomerFunnelStageInput) {\n      id\n      name\n      dashboardId\n  }\n}\n": types.UpsertCustomerFunnelStageDocument,
    "\nmutation UpsertSelector($upsertSelectorSelectors: [UpsertSelectorInput!]!) {\n  upsertSelector(selectors: $upsertSelectorSelectors) {\n    link\n    querySelector\n    websiteId\n  }\n}\n": types.UpsertSelectorDocument,
    "\nquery GetAccountOptions {\n  companyRoles (\n    first: 100\n    sorting: {\n      order: asc\n      field: \"name\"\n  }\n  ) {\n    edges {\n      node {\n        id\n         name\n       \t createdAt\n      }\n    }\n  },\n  companyIndustries (    \n    first: 100\n    sorting: {\n      order: asc\n      field: \"name\"\n  }) {\n    edges {\n      node {\n        id\n         name\n       \t createdAt\n      }\n    }\n  },\n companySizes (    \n  first:100\n  ) {\n    edges {\n      node {\n        id\n         name\n       \t createdAt\n      }\n    }\n  }\n}\n": types.GetAccountOptionsDocument,
    "\n  query CampaignPerformanceDeepDiveOverview(\n    $dashboardId: String!,\n    $dashboardTimeframe: DashboardTimeframe!,\n    $campaignName: String!,\n    $take: Int,\n    $skip: Int!,\n    $campaignPerformanceSorting: CampaignPerformanceSorting,\n    $isFromCache: Boolean!\n  ) {\n    campaignPerformanceDeepDiveOverview(\n      dashboardId: $dashboardId,\n      dashboardTimeframe: $dashboardTimeframe,\n      campaignName: $campaignName,\n      take: $take,\n      skip: $skip,\n      campaignPerformanceSorting: $campaignPerformanceSorting,\n      isFromCache: $isFromCache\n    ) {\n      totalVisits\n      totalSpend\n      firstStageTotals {\n        total\n        stageLabel\n      }\n      lastStageTotals {\n        total\n        stageLabel\n      }\n      topPerformer\n      activity {\n        sourceUrl\n        firstPageVisited\n        leadConversion\n        customerConversion\n      }\n      totalActivity\n      cpc {\n        cost\n        label\n      }\n      cpl {\n        cost\n        label\n      }\n    }\n  }\n": types.CampaignPerformanceDeepDiveOverviewDocument,
    "\nquery GetChannelPerformanceDeepDiveActivityDetails(\n  $dashboardId: String!,\n  $channelName: ChannelFiltersDashboardEnum!,\n  $dashboardTimeframe: DashboardTimeframe!,\n  $skip: Int!,\n  $take: Int\n  ) {\n  channelPerformanceDeepDiveActivityDetails(\n    dashboardId: $dashboardId,\n    channelName: $channelName,\n    dashboardTimeframe: $dashboardTimeframe,\n    skip: $skip,\n    take: $take\n  ) {\n    totalActivityDetails\n    activityDetails {\n      id\n      region\n      pageUrl\n      email\n      searchTerm\n      customerFunnelStageName\n    }\n  }\n}\n": types.GetChannelPerformanceDeepDiveActivityDetailsDocument,
    "\nquery GetChannelPerformanceDeepDiveCampaigns(\n  $dashboardId: String!,\n  $channelName: ChannelFiltersDashboardEnum!,\n  $dashboardTimeframe: DashboardTimeframe!\n  ) {\n  channelPerformanceDeepDiveCampaigns(\n    dashboardId: $dashboardId,\n    channelName: $channelName,\n    dashboardTimeframe: $dashboardTimeframe\n  ) {\n    campaigns {\n        name\n        customerFunnels {\n          name\n          count\n      }\n    }\n  }\n}\n": types.GetChannelPerformanceDeepDiveCampaignsDocument,
    "\nquery GetChannelPerformanceDeepDiveOverview(\n  $dashboardId: String!,\n  $channelName: ChannelFiltersDashboardEnum!,\n  $dashboardTimeframe: DashboardTimeframe!\n  ) {\n  channelPerformanceDeepDiveOverview(\n    dashboardId: $dashboardId,\n    channelName: $channelName,\n    dashboardTimeframe: $dashboardTimeframe\n  ) {\n    currency\n    customerFunnelsOverView {\n      name\n      organicCount\n      paidCount\n      totalCount\n      costPer\n      currency\n    }\n    spend\n  }\n}\n": types.GetChannelPerformanceDeepDiveOverviewDocument,
    "\n  query DashboardAcquisitionPerformance(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $funnelStageName: String\n    $channel: Channels\n  ) {\n    dashboardAcquisitionPerformance(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      funnelStageName: $funnelStageName \n      channel: $channel\n    ) {\n        startDate\n        isSetup\n        endDate\n        acquisitionPerformance {\n          date\n          count\n        }\n      }\n  }\n": types.DashboardAcquisitionPerformanceDocument,
    "\n  query GetDashboardActivity(\n    $dashboardId: UUID!\n    ) {\n    dashboardActivityGoal(\n      dashboardId: $dashboardId\n    ) {\n      dashboardId\n      totalNumberOfEvents\n      currentNumberOfEvents\n      completesInDays\n      isSetup\n      customerFunnelStageName\n      activityGoalProgress {\n        date\n        value\n      }\n    }\n  }\n": types.GetDashboardActivityDocument,
    "\n  query GetDashboardBudget(\n    $dashboardId: UUID!\n    ) {\n    dashboardBudget(\n        dashboardId: $dashboardId\n    ) {\n      dashboardId\n      totalAmount\n      usedAmount\n      currency\n      recurring\n      recurringRepeat\n      renewsIn\n      isSetup\n      budgetUsage {\n        date\n        amount\n      }\n    }\n  }\n": types.GetDashboardBudgetDocument,
    "\n  query GetDashboardCampaigns(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $status: CampaignStatusInput!\n    $sorting: CampaignSorting!\n    $take: Int\n    $skip: Int\n  ) {\n    dashboardCampaignsList(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      status: $status\n      sorting: $sorting\n      take: $take\n      skip: $skip\n    ) {\n      hasEvents\n      totalVisits\n      totalConversions\n      totalCampaigns\n      campaigns {\n        name\n        status\n        startDate\n        endDate\n        visits\n        leads {\n          name\n          count\n        }\n        customers {\n          name\n          count\n        }\n        spend\n        cac\n        currency\n        urlSourcesImages\n        \n      }\n    }\n  }\n": types.GetDashboardCampaignsDocument,
    "\n  query GetDashboardChanelPerformance(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $channelPerformanceSorting: ChannelPerformanceSorting!\n  ) {\n    dashboardChannelPerformance(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      channelPerformanceSorting: $channelPerformanceSorting\n    ) {\n      channelsPerformance {\n        stageName\n        name\n        count\n        stageId\n        channels {\n          name\n          currency\n          count\n          spend\n          perStage\n        }\n      }\n      hasEvents\n      isSetup\n    }\n  }\n": types.GetDashboardChanelPerformanceDocument,
    "\n  query GetDashboardCustomerJourney(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n  ) {\n    dashboardCustomerJourney(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n    ) {\n      dashboardId\n      journeys {\n        id\n        name\n        events {\n          id\n          name\n        }\n        conversionEvents\n        conversionEventsPercentage\n      }\n      hasEvents\n      isSetup\n      period\n    }\n  }\n": types.GetDashboardCustomerJourneyDocument,
    "\nquery GetOrganization($organizationId: UUID!) {\n  organization(id: $organizationId) {\n    id\n    defaultWebsiteId\n    companyIndustryId\n    name\n    companySizeId\n    imageUrl\n    user {\n      firstName\n      lastName\n      id\n      email\n    }\n  }\n}\n": types.GetOrganizationDocument,
    "\n  query GetDashboardOverview(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n  ) {\n    dashboardOverview(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n    ) {\n      startDate\n      endDate\n      leads {\n        count\n        name\n      }\n      conversion\n      cac\n      websiteConversionRate\n      cacCurrency\n      newCustomers {\n        count\n        name\n      }\n      status\n      isSetup\n      hasEvents\n    }\n  }\n": types.GetDashboardOverviewDocument,
    "\n  query GetDashboardWebsiteActivity(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $pageViewsSorting: PageViewsSorting!\n    $take: Int\n  ) {\n    dashboardWebsiteActivity(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      pageViewsSorting: $pageViewsSorting\n      take: $take\n    ) {\n      domain\n      websiteImageUrl\n      conversionRate\n      totalSources\n      hasEvents\n      pageViews {\n        page\n        views\n        conversions\n      }\n      sources {\n        name\n        imageUrl\n        conversions\n      }\n      traffic {\n        pageViews\n        date\n      }\n    }\n  }\n": types.GetDashboardWebsiteActivityDocument,
    "\n    query GetWebsites( \n        $before: String\n        $after: String\n        $first: Int\n        $last: Int\n        $sorting: Sorting\n        $filters: WebsitesFiltersInput\n    ) {\n        websites(before: $before, after: $after, first: $first, last: $last, sorting: $sorting, filters: $filters) {\n            edges {\n    \t\t    node {\n                    id\n                    name\n                    defaultDashboardId\n                    imageUrl\n                }\n            }\n        }\n    }\n": types.GetWebsitesDocument,
    "\n  query GetDashboard(\n    $dashboardId: UUID!\n  ) {\n    dashboard(\n      id: $dashboardId\n    ) {\n      id\n      websiteId\n      name\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetDashboardDocument,
    "\n  query GetDashboards(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sorting: Sorting\n    $filters: DashboardsFiltersInput\n  ) {\n    dashboards(\n      first: $first\n      after: $after\n      last: $last\n      before: $before\n      sorting: $sorting\n      filters: $filters\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          websiteId\n          name\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.GetDashboardsDocument,
    "\n  query FunnelPerformanceDeepDiveConversionDetails(\n    $dashboardId: String!,\n    $firstPageVisited: String!,\n    $dashboardTimeframe: DashboardTimeframe!,\n    $customerFunnelId: UUID!,\n    $sourceUrl: String,\n    $take: Int,\n    $skip: Int!\n  ) {\n    funnelPerformanceDeepDiveConversionDetails(\n      dashboardId: $dashboardId,\n      firstPageVisited: $firstPageVisited,\n      dashboardTimeframe: $dashboardTimeframe,\n      customerFunnelId: $customerFunnelId,\n      sourceUrl: $sourceUrl,\n      take: $take,\n      skip: $skip\n    ) {\n      totalFunnelPerformanceConversionEvents\n      totalSearchTerms\n      funnelName\n      funnelPerformanceConversionEvents {\n        region\n        email\n        firstPageVisited\n        searchTerm\n        channel\n        timestamp\n      }\n    }\n  }\n": types.FunnelPerformanceDeepDiveConversionDetailsDocument,
    "\n  query FunnelPerformanceDeepDive(\n    $dashboardId: String!,\n    $dashboardTimeframe: DashboardTimeframe!,\n    $customerFunnelId: UUID!,\n    $isFromCache: Boolean!,\n    $take: Int,\n    $skip: Int!,\n    $funnelPerformanceSorting: FunnelPerformanceSorting!\n  ) {\n    funnelPerformanceDeepDive(\n      dashboardId: $dashboardId,\n      dashboardTimeframe: $dashboardTimeframe,\n      customerFunnelId: $customerFunnelId,\n      isFromCache: $isFromCache,\n      take: $take,\n      skip: $skip,\n      funnelPerformanceSorting: $funnelPerformanceSorting\n    ) {\n      totalEvents\n      totalConversions\n      funnelName\n      totalFunnelPerformanceConversions\n      funnelPerformanceConversions {\n        sourceUrl\n        urlSourceImage\n        firstPageVisited\n        conversions\n      }\n    }\n  }\n": types.FunnelPerformanceDeepDiveDocument,
    "\n  query GeneratePixelScript(\n    $websiteId: UUID!\n  ) {\n    generatePixelScript(\n      id: $websiteId\n    )\n  }\n": types.GeneratePixelScriptDocument,
    "\nquery GetMe {\n  me {\n\t\tid\n\t\temail\n\t\tfirstName\n\t\tlastName\n\t\tcompanyRoleId\n\t\tcompanyIndustryId\n\t\tcompanySizeId\n\t\tdefaultOrganizationId\n\t\tcurrentOnboardingPath\n\t\tcreatedAt\n\t\tupdatedAt\n\t\tpermissions {\n\t\t\torganizationId\n\t\t\taccessLevel\n\t\t\tdashboardId\n\t\t\twebsiteId\n\t\t}\n\t\timageUrl\n  }\n}\n": types.GetMeDocument,
    "\n  query GetFunnelStages(\n    $dashboardId: UUID!\n    $first: Int!\n    ) {\n    customerFunnelStages(dashboardId: $dashboardId first: $first) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetFunnelStagesDocument,
    "\n  query GetOnboardingGoals($dashboardId: String!) {\n    activityGoals(filters: { dashboardId: { eq: $dashboardId }} first: 1) \n    {\n        edges {\n            node {\n                id\n                numberOfEvents\n                customerFunnelStageId\n\t        }\n        }\n    }\n\tbudgetGoals(filters: { dashboardId: { eq: $dashboardId}}, first: 1) {\n\t\tedges {\n\t\t\tnode {\n          id\n\t\t\t    currency\n          recurring\n          value\n          recurringRepeat\n\t\t    }\n\t    }\n\t}\n  }\n": types.GetOnboardingGoalsDocument,
    "\nquery GetOrganizations(\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $sorting: Sorting\n    $filters: OrganizationsFiltersInput) {\n    organizations(before: $before, after: $after, first: $first, last: $last, sorting: $sorting, filters: $filters) {\n    \tedges {\n    \t\tnode {\n    \t\t\tid\n    \t\t\tname\n                companySizeId\n                companyIndustryId\n                imageUrl\n                defaultWebsiteId\n                website {\n                    defaultDashboardId\n                }\n    \t\t}\n    \t}\n    }\n}\n": types.GetOrganizationsDocument,
    "\n  query GetStage(\n    $id: UUID!\n    ) {\n    customerFunnelStage(id: $id) {\n\t\tid\n\t\tdashboardId\n\t\tcustomerFunnelStageEvents {\n\t\t\tid\n\t\t\tcustomerFunnelStageId\n\t\t\tname\n\t\t\teventType\n\t\t\tcustomerFunnelStageEventConditions {\n\t\t\t\tid\n\t\t\t\tcustomerFunnelStageEventId\n\t\t\t\tpageUrl\n\t\t\t\tvisitorType\n\t\t\t\tstartingUrl\n\t\t\t\tstartingUrlCondition\n\t\t\t\tdestinationUrl\n\t\t\t\tdestinationUrlCondition\n\t\t\t}\n\t\t}\n\t\tname\n\t\tcreatedAt\n\t\tupdatedAt\n\t}\n  }\n": types.GetStageDocument,
    "\n    query GetOrganizationPermissions(\n        $filters: PermissionsFiltersInput, \n        $first: Int, \n        $last: Int, \n        $before: String, \n        $after: String, \n        $sorting: Sorting,\n        $take: Int, \n        $skip: Int\n        ) \n        {\n            permissions (\n              first: $first\n              last: $last\n              before: $before\n              after: $after\n              sorting: $sorting\n              filters: $filters\n              take: $take\n              skip: $skip\n              ) {\n              totalTeamMembers\n              edges {\n                node {\n                  id\n                  invitationStatus\n                  accessLevel\n                  userId\n                  user {\n                    id\n                    firstName\n                    lastName\n                    email\n                  }\n                }\n              }\n            }\n        }\n": types.GetOrganizationPermissionsDocument,
    "\n  query IsWebsiteConnected($websiteId: UUID!) {\n    isWebsiteConnected(websiteId: $websiteId)\n  }\n": types.IsWebsiteConnectedDocument,
    "\n  query IsHubspotConnected($websiteId: UUID!) {\n    isHubspotConnected(websiteId: $websiteId)\n  }\n": types.IsHubspotConnectedDocument,
    "\n  query GetNotifications(\n\t\t$websiteId: String!\n\t\t$take: Int\n\t\t$skip: Int\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n\t) {\n  notifications(\n\t\tfilters: {\n      websiteId: {\n        eq: $websiteId\n      }\n    }\n    take: $take\n    skip: $skip\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n  ) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      cursor\n      node {\n        id\n        websiteId\n        notificationType\n        title\n        message\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n": types.GetNotificationsDocument,
    "\n  query Selectors($websiteId: String!) {\n    selectors(websiteId: $websiteId) {\n      createdAt\n      id\n      link\n      querySelector\n      updatedAt\n      websiteId\n    }\n  }\n": types.SelectorsDocument,
    "\n  query GetWebsite($id: UUID!) {\n    website(id: $id) {\n      organizationId\n      snippetUrl\n      domain\n      id\n      id\n      organizationId\n      name\n      domain\n      description\n      snippetUrl\n      scriptUrl\n      imageUrl\n      pixelScriptGenerationStatus\n      defaultDashboardId\n      createdAt\n      updatedAt    \n      hubspotIntegrationStatus\n      salesforceIntegrationStatus\n      metaAdsIntegrationStatus\n      googleAdsIntegrationStatus\n      organization {\n        name\n      }\n      user {\n        firstName\n        lastName\n      }\n    }\n  }\n": types.GetWebsiteDocument,
    "\n  subscription WebsiteUpdated(\n    $websiteId: UUID!\n  ) {\n    websiteUpdated(websiteId: $websiteId) {\n      id\n      organizationId\n      name\n      domain\n      description\n      snippetUrl\n      scriptUrl\n      imageUrl\n      pixelScriptGenerationStatus\n      createdAt\n      updatedAt\n    }\n  }\n": types.WebsiteUpdatedDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateActivityGoalMutation($createActivityGoalInput: CreateActivityGoalInput!) {\n    createActivityGoal(createActivityGoalInput: $createActivityGoalInput) {\n      dashboardId\n      numberOfEvents\n    }\n  }\n"): (typeof documents)["\n  mutation CreateActivityGoalMutation($createActivityGoalInput: CreateActivityGoalInput!) {\n    createActivityGoal(createActivityGoalInput: $createActivityGoalInput) {\n      dashboardId\n      numberOfEvents\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateBudgetGoalMutation($createBudgetGoalInput: CreateBudgetGoalInput!) {\n    createBudgetGoal(createBudgetGoalInput: $createBudgetGoalInput) {\n        id\n        dashboardId\n        value\n        currency\n        recurring\n        recurringRepeat\n        createdAt\n        updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBudgetGoalMutation($createBudgetGoalInput: CreateBudgetGoalInput!) {\n    createBudgetGoal(createBudgetGoalInput: $createBudgetGoalInput) {\n        id\n        dashboardId\n        value\n        currency\n        recurring\n        recurringRepeat\n        createdAt\n        updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateDashboardMutation($createDashboardInput: CreateDashboardInput!) {\n    createDashboard(createDashboardInput: $createDashboardInput) {\n      id\n      name\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateDashboardMutation($createDashboardInput: CreateDashboardInput!) {\n    createDashboard(createDashboardInput: $createDashboardInput) {\n      id\n      name\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateExpense ($createExpenseInput: CreateExpenseInput!) {\n    createExpense (createExpenseInput: $createExpenseInput) {\n      amount\n      category\n      createdAt\n      dashboardId\n      id\n      name\n      recurringRepeat\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateExpense ($createExpenseInput: CreateExpenseInput!) {\n    createExpense (createExpenseInput: $createExpenseInput) {\n      amount\n      category\n      createdAt\n      dashboardId\n      id\n      name\n      recurringRepeat\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateCustomerFunnelStage($createCustomerFunnelStageInput: [CreateCustomerFunnelStageInput!]!) {\n  createCustomerFunnelStage(createCustomerFunnelStageInput: $createCustomerFunnelStageInput) {\n    dashboardId\n    id\n  }\n}\n"): (typeof documents)["\nmutation CreateCustomerFunnelStage($createCustomerFunnelStageInput: [CreateCustomerFunnelStageInput!]!) {\n  createCustomerFunnelStage(createCustomerFunnelStageInput: $createCustomerFunnelStageInput) {\n    dashboardId\n    id\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateOrganization($createOrganizationInput: CreateOrganizationInput!) {\n\t\tcreateOrganization(createOrganizationInput: $createOrganizationInput) {\n\t\tid,\n\t\tuserId,\n\t\tname\n\t}\n}\n"): (typeof documents)["\nmutation CreateOrganization($createOrganizationInput: CreateOrganizationInput!) {\n\t\tcreateOrganization(createOrganizationInput: $createOrganizationInput) {\n\t\tid,\n\t\tuserId,\n\t\tname\n\t}\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreatePermission($createPermissionInput: CreatePermissionInput!) {\n  createPermission(createPermissionInput: $createPermissionInput) {\n    id\n  }\n}\n"): (typeof documents)["\nmutation CreatePermission($createPermissionInput: CreatePermissionInput!) {\n  createPermission(createPermissionInput: $createPermissionInput) {\n    id\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateWebsite($createWebsiteInput: CreateWebsiteInput!) {\n        createWebsite(createWebsiteInput: $createWebsiteInput) {\n            organizationId\n\t\t    name\n\t\t    domain\n            id\n        }\n    }\n"): (typeof documents)["\n    mutation CreateWebsite($createWebsiteInput: CreateWebsiteInput!) {\n        createWebsite(createWebsiteInput: $createWebsiteInput) {\n            organizationId\n\t\t    name\n\t\t    domain\n            id\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation DeleteOrganizationImage($deleteOrganizationImageInput: DeleteOrganizationImageInput!) {\n        deleteOrganizationImage(deleteOrganizationImageInput: $deleteOrganizationImageInput) {\n            id\n        }\n    }\n"): (typeof documents)["\n    mutation DeleteOrganizationImage($deleteOrganizationImageInput: DeleteOrganizationImageInput!) {\n        deleteOrganizationImage(deleteOrganizationImageInput: $deleteOrganizationImageInput) {\n            id\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation DeleteUserImage($deleteUserImageInput: DeleteUserImageInput!) {\n        deleteUserImage(deleteUserImageInput: $deleteUserImageInput) {\n            id\n        }\n    }\n"): (typeof documents)["\n    mutation DeleteUserImage($deleteUserImageInput: DeleteUserImageInput!) {\n        deleteUserImage(deleteUserImageInput: $deleteUserImageInput) {\n            id\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation DeleteWebsiteImage($deleteWebsiteImageInput: DeleteWebsiteImageInput!) {\n        deleteWebsiteImage(deleteWebsiteImageInput: $deleteWebsiteImageInput) {\n            id\n        }\n    }\n"): (typeof documents)["\n    mutation DeleteWebsiteImage($deleteWebsiteImageInput: DeleteWebsiteImageInput!) {\n        deleteWebsiteImage(deleteWebsiteImageInput: $deleteWebsiteImageInput) {\n            id\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdatePermission($updatePermissionInput: UpdatePermissionInput!) {\n  updatePermission(updatePermissionInput: $updatePermissionInput) {\n    id\n  }\n}\n"): (typeof documents)["\nmutation UpdatePermission($updatePermissionInput: UpdatePermissionInput!) {\n  updatePermission(updatePermissionInput: $updatePermissionInput) {\n    id\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SendConnectionsRecommendationEmail($sendConnectionsRecommendationEmailInput: SendConnectionsRecommendationEmailInput!) {\n    sendConnectionsRecommendationEmail(sendConnectionsRecommendationEmailInput: $sendConnectionsRecommendationEmailInput)\n  }\n"): (typeof documents)["\n  mutation SendConnectionsRecommendationEmail($sendConnectionsRecommendationEmailInput: SendConnectionsRecommendationEmailInput!) {\n    sendConnectionsRecommendationEmail(sendConnectionsRecommendationEmailInput: $sendConnectionsRecommendationEmailInput)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SendShareALinkSetupEmail($sendShareALinkSetupEmailInput: SendShareALinkSetupEmailInput!) {\n    sendShareALinkSetupEmail(sendShareALinkSetupEmailInput: $sendShareALinkSetupEmailInput)\n  }\n"): (typeof documents)["\n  mutation SendShareALinkSetupEmail($sendShareALinkSetupEmailInput: SendShareALinkSetupEmailInput!) {\n    sendShareALinkSetupEmail(sendShareALinkSetupEmailInput: $sendShareALinkSetupEmailInput)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveActivityGoalMutation($id: UUID!) {\n    removeActivityGoal(id: $id)\n  }\n"): (typeof documents)["\n  mutation RemoveActivityGoalMutation($id: UUID!) {\n    removeActivityGoal(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveBudgetGoalMutation($id: UUID!) {\n    removeBudgetGoal(id: $id)\n  }\n"): (typeof documents)["\n  mutation RemoveBudgetGoalMutation($id: UUID!) {\n    removeBudgetGoal(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RemoveDashboard($dashboardId: UUID!) {\n        removeDashboard(id: $dashboardId)\n    }\n"): (typeof documents)["\n    mutation RemoveDashboard($dashboardId: UUID!) {\n        removeDashboard(id: $dashboardId)\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RemovePermissions($removePermissionId: UUID!) {\n        removePermission(id: $removePermissionId)\n    }\n"): (typeof documents)["\n    mutation RemovePermissions($removePermissionId: UUID!) {\n        removePermission(id: $removePermissionId)\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RemoveWebsite($websiteId: UUID!) {\n        removeWebsite(id: $websiteId)\n    }\n"): (typeof documents)["\n    mutation RemoveWebsite($websiteId: UUID!) {\n        removeWebsite(id: $websiteId)\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SetCurrentOnboardingPath($currentOnboardingPath: String) {\n    setCurrentOnboardingPath(\n      currentOnboardingPath: $currentOnboardingPath\n    ) {\n      id\n      currentOnboardingPath\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation SetCurrentOnboardingPath($currentOnboardingPath: String) {\n    setCurrentOnboardingPath(\n      currentOnboardingPath: $currentOnboardingPath\n    ) {\n      id\n      currentOnboardingPath\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateActivityGoalMutation($updateActivityGoalInput: UpdateActivityGoalInput!) {\n    updateActivityGoal(updateActivityGoalInput: $updateActivityGoalInput) {\n      customerFunnelStageId\n      dashboardId\n      id\n      numberOfEvents\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateActivityGoalMutation($updateActivityGoalInput: UpdateActivityGoalInput!) {\n    updateActivityGoal(updateActivityGoalInput: $updateActivityGoalInput) {\n      customerFunnelStageId\n      dashboardId\n      id\n      numberOfEvents\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Mutation($updateBudgetGoalInput: UpdateBudgetGoalInput!) {\n    updateBudgetGoal(updateBudgetGoalInput: $updateBudgetGoalInput) {\n        recurring\n        currency\n        dashboardId\n        id\n        recurringRepeat\n        value\n    }\n  }\n"): (typeof documents)["\n  mutation Mutation($updateBudgetGoalInput: UpdateBudgetGoalInput!) {\n    updateBudgetGoal(updateBudgetGoalInput: $updateBudgetGoalInput) {\n        recurring\n        currency\n        dashboardId\n        id\n        recurringRepeat\n        value\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateDashboard($updateDashboardInput: UpdateDashboardInput!) {\n    updateDashboard(updateDashboardInput: $updateDashboardInput){\n    id\n    name,\n    websiteId,\n    createdAt\n    updatedAt\n  }\n}\n"): (typeof documents)["\nmutation UpdateDashboard($updateDashboardInput: UpdateDashboardInput!) {\n    updateDashboard(updateDashboardInput: $updateDashboardInput){\n    id\n    name,\n    websiteId,\n    createdAt\n    updatedAt\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateFunnelStage($updateCustomerFunnelStageInput: UpdateCustomerFunnelStageInput!) {\n\tupdateCustomerFunnelStage(updateCustomerFunnelStageInput: $updateCustomerFunnelStageInput) {\n\t\tdashboardId,\n\t\tid\n\t\tname\n\t\tcustomerFunnelStageEvents {\n\t\t\tid\n\t\t\tcustomerFunnelStageId\n\t\t\tname\n\t\t\teventType\n\t\t\tcustomerFunnelStageEventConditions {\n\t\t\t\tid\n\t\t\t\tcustomerFunnelStageEventId\n\t\t\t\tpageUrl\n\t\t\t\tvisitorType\n\t\t\t\tstartingUrl\n\t\t\t\tstartingUrlCondition\n\t\t\t\tdestinationUrl\n\t\t\t\tdestinationUrlCondition\n\t\t\t}\n\t\t}\n\t\tcreatedAt\n\t\tupdatedAt\n\t}\n}\n"): (typeof documents)["\nmutation UpdateFunnelStage($updateCustomerFunnelStageInput: UpdateCustomerFunnelStageInput!) {\n\tupdateCustomerFunnelStage(updateCustomerFunnelStageInput: $updateCustomerFunnelStageInput) {\n\t\tdashboardId,\n\t\tid\n\t\tname\n\t\tcustomerFunnelStageEvents {\n\t\t\tid\n\t\t\tcustomerFunnelStageId\n\t\t\tname\n\t\t\teventType\n\t\t\tcustomerFunnelStageEventConditions {\n\t\t\t\tid\n\t\t\t\tcustomerFunnelStageEventId\n\t\t\t\tpageUrl\n\t\t\t\tvisitorType\n\t\t\t\tstartingUrl\n\t\t\t\tstartingUrlCondition\n\t\t\t\tdestinationUrl\n\t\t\t\tdestinationUrlCondition\n\t\t\t}\n\t\t}\n\t\tcreatedAt\n\t\tupdatedAt\n\t}\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation updateOrganization($updateOrganizationInput: UpdateOrganizationInput!) {\n\t\tupdateOrganization(updateOrganizationInput: $updateOrganizationInput) {\n\t\tid,\n\t\tuserId,\n\t\tname\n\t}\n}\n"): (typeof documents)["\nmutation updateOrganization($updateOrganizationInput: UpdateOrganizationInput!) {\n\t\tupdateOrganization(updateOrganizationInput: $updateOrganizationInput) {\n\t\tid,\n\t\tuserId,\n\t\tname\n\t}\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateUser($updateUserInput: UpdateUserInput!) {\n  updateUser(updateUserInput: $updateUserInput) {\n    id\n    email\n    firstName\n    lastName\n    companyRoleId\n    createdAt\n    updatedAt\n  }\n}\n"): (typeof documents)["\nmutation UpdateUser($updateUserInput: UpdateUserInput!) {\n  updateUser(updateUserInput: $updateUserInput) {\n    id\n    email\n    firstName\n    lastName\n    companyRoleId\n    createdAt\n    updatedAt\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateWebsite($updateWebsiteInput: UpdateWebsiteInput!) {\n\t\tupdateWebsite(updateWebsiteInput: $updateWebsiteInput) {\n\t\tid,\n\t\torganizationId,\n\t\tname,\n\t\tdomain,\n\t\tdescription\n\t}\n}\n"): (typeof documents)["\nmutation UpdateWebsite($updateWebsiteInput: UpdateWebsiteInput!) {\n\t\tupdateWebsite(updateWebsiteInput: $updateWebsiteInput) {\n\t\tid,\n\t\torganizationId,\n\t\tname,\n\t\tdomain,\n\t\tdescription\n\t}\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UploadOrganizationImage($uploadOrganizationImageInput: UploadOrganizationImageInput!) {\n        uploadOrganizationImage(uploadOrganizationImageInput: $uploadOrganizationImageInput) {\n            id,\n            imageUrl\n        }\n    }\n"): (typeof documents)["\n    mutation UploadOrganizationImage($uploadOrganizationImageInput: UploadOrganizationImageInput!) {\n        uploadOrganizationImage(uploadOrganizationImageInput: $uploadOrganizationImageInput) {\n            id,\n            imageUrl\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UploadUserImage($uploadUserImageInput: UploadUserImageInput!) {\n        uploadUserImage(uploadUserImageInput: $uploadUserImageInput) {\n            id,\n            imageUrl\n        }\n    }\n"): (typeof documents)["\n    mutation UploadUserImage($uploadUserImageInput: UploadUserImageInput!) {\n        uploadUserImage(uploadUserImageInput: $uploadUserImageInput) {\n            id,\n            imageUrl\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UploadWebsiteImage($uploadWebsiteImageInput: UploadWebsiteImageInput!) {\n        uploadWebsiteImage(uploadWebsiteImageInput: $uploadWebsiteImageInput) {\n            id,\n            imageUrl\n        }\n    }\n"): (typeof documents)["\n    mutation UploadWebsiteImage($uploadWebsiteImageInput: UploadWebsiteImageInput!) {\n        uploadWebsiteImage(uploadWebsiteImageInput: $uploadWebsiteImageInput) {\n            id,\n            imageUrl\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpsertCustomerFunnelStage($upsertCustomerFunnelStageInput: [UpsertCustomerFunnelStageInput!]!) {\n  upsertCustomerFunnelStage(upsertCustomerFunnelStageInput: $upsertCustomerFunnelStageInput) {\n      id\n      name\n      dashboardId\n  }\n}\n"): (typeof documents)["\nmutation UpsertCustomerFunnelStage($upsertCustomerFunnelStageInput: [UpsertCustomerFunnelStageInput!]!) {\n  upsertCustomerFunnelStage(upsertCustomerFunnelStageInput: $upsertCustomerFunnelStageInput) {\n      id\n      name\n      dashboardId\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpsertSelector($upsertSelectorSelectors: [UpsertSelectorInput!]!) {\n  upsertSelector(selectors: $upsertSelectorSelectors) {\n    link\n    querySelector\n    websiteId\n  }\n}\n"): (typeof documents)["\nmutation UpsertSelector($upsertSelectorSelectors: [UpsertSelectorInput!]!) {\n  upsertSelector(selectors: $upsertSelectorSelectors) {\n    link\n    querySelector\n    websiteId\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetAccountOptions {\n  companyRoles (\n    first: 100\n    sorting: {\n      order: asc\n      field: \"name\"\n  }\n  ) {\n    edges {\n      node {\n        id\n         name\n       \t createdAt\n      }\n    }\n  },\n  companyIndustries (    \n    first: 100\n    sorting: {\n      order: asc\n      field: \"name\"\n  }) {\n    edges {\n      node {\n        id\n         name\n       \t createdAt\n      }\n    }\n  },\n companySizes (    \n  first:100\n  ) {\n    edges {\n      node {\n        id\n         name\n       \t createdAt\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetAccountOptions {\n  companyRoles (\n    first: 100\n    sorting: {\n      order: asc\n      field: \"name\"\n  }\n  ) {\n    edges {\n      node {\n        id\n         name\n       \t createdAt\n      }\n    }\n  },\n  companyIndustries (    \n    first: 100\n    sorting: {\n      order: asc\n      field: \"name\"\n  }) {\n    edges {\n      node {\n        id\n         name\n       \t createdAt\n      }\n    }\n  },\n companySizes (    \n  first:100\n  ) {\n    edges {\n      node {\n        id\n         name\n       \t createdAt\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CampaignPerformanceDeepDiveOverview(\n    $dashboardId: String!,\n    $dashboardTimeframe: DashboardTimeframe!,\n    $campaignName: String!,\n    $take: Int,\n    $skip: Int!,\n    $campaignPerformanceSorting: CampaignPerformanceSorting,\n    $isFromCache: Boolean!\n  ) {\n    campaignPerformanceDeepDiveOverview(\n      dashboardId: $dashboardId,\n      dashboardTimeframe: $dashboardTimeframe,\n      campaignName: $campaignName,\n      take: $take,\n      skip: $skip,\n      campaignPerformanceSorting: $campaignPerformanceSorting,\n      isFromCache: $isFromCache\n    ) {\n      totalVisits\n      totalSpend\n      firstStageTotals {\n        total\n        stageLabel\n      }\n      lastStageTotals {\n        total\n        stageLabel\n      }\n      topPerformer\n      activity {\n        sourceUrl\n        firstPageVisited\n        leadConversion\n        customerConversion\n      }\n      totalActivity\n      cpc {\n        cost\n        label\n      }\n      cpl {\n        cost\n        label\n      }\n    }\n  }\n"): (typeof documents)["\n  query CampaignPerformanceDeepDiveOverview(\n    $dashboardId: String!,\n    $dashboardTimeframe: DashboardTimeframe!,\n    $campaignName: String!,\n    $take: Int,\n    $skip: Int!,\n    $campaignPerformanceSorting: CampaignPerformanceSorting,\n    $isFromCache: Boolean!\n  ) {\n    campaignPerformanceDeepDiveOverview(\n      dashboardId: $dashboardId,\n      dashboardTimeframe: $dashboardTimeframe,\n      campaignName: $campaignName,\n      take: $take,\n      skip: $skip,\n      campaignPerformanceSorting: $campaignPerformanceSorting,\n      isFromCache: $isFromCache\n    ) {\n      totalVisits\n      totalSpend\n      firstStageTotals {\n        total\n        stageLabel\n      }\n      lastStageTotals {\n        total\n        stageLabel\n      }\n      topPerformer\n      activity {\n        sourceUrl\n        firstPageVisited\n        leadConversion\n        customerConversion\n      }\n      totalActivity\n      cpc {\n        cost\n        label\n      }\n      cpl {\n        cost\n        label\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetChannelPerformanceDeepDiveActivityDetails(\n  $dashboardId: String!,\n  $channelName: ChannelFiltersDashboardEnum!,\n  $dashboardTimeframe: DashboardTimeframe!,\n  $skip: Int!,\n  $take: Int\n  ) {\n  channelPerformanceDeepDiveActivityDetails(\n    dashboardId: $dashboardId,\n    channelName: $channelName,\n    dashboardTimeframe: $dashboardTimeframe,\n    skip: $skip,\n    take: $take\n  ) {\n    totalActivityDetails\n    activityDetails {\n      id\n      region\n      pageUrl\n      email\n      searchTerm\n      customerFunnelStageName\n    }\n  }\n}\n"): (typeof documents)["\nquery GetChannelPerformanceDeepDiveActivityDetails(\n  $dashboardId: String!,\n  $channelName: ChannelFiltersDashboardEnum!,\n  $dashboardTimeframe: DashboardTimeframe!,\n  $skip: Int!,\n  $take: Int\n  ) {\n  channelPerformanceDeepDiveActivityDetails(\n    dashboardId: $dashboardId,\n    channelName: $channelName,\n    dashboardTimeframe: $dashboardTimeframe,\n    skip: $skip,\n    take: $take\n  ) {\n    totalActivityDetails\n    activityDetails {\n      id\n      region\n      pageUrl\n      email\n      searchTerm\n      customerFunnelStageName\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetChannelPerformanceDeepDiveCampaigns(\n  $dashboardId: String!,\n  $channelName: ChannelFiltersDashboardEnum!,\n  $dashboardTimeframe: DashboardTimeframe!\n  ) {\n  channelPerformanceDeepDiveCampaigns(\n    dashboardId: $dashboardId,\n    channelName: $channelName,\n    dashboardTimeframe: $dashboardTimeframe\n  ) {\n    campaigns {\n        name\n        customerFunnels {\n          name\n          count\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetChannelPerformanceDeepDiveCampaigns(\n  $dashboardId: String!,\n  $channelName: ChannelFiltersDashboardEnum!,\n  $dashboardTimeframe: DashboardTimeframe!\n  ) {\n  channelPerformanceDeepDiveCampaigns(\n    dashboardId: $dashboardId,\n    channelName: $channelName,\n    dashboardTimeframe: $dashboardTimeframe\n  ) {\n    campaigns {\n        name\n        customerFunnels {\n          name\n          count\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetChannelPerformanceDeepDiveOverview(\n  $dashboardId: String!,\n  $channelName: ChannelFiltersDashboardEnum!,\n  $dashboardTimeframe: DashboardTimeframe!\n  ) {\n  channelPerformanceDeepDiveOverview(\n    dashboardId: $dashboardId,\n    channelName: $channelName,\n    dashboardTimeframe: $dashboardTimeframe\n  ) {\n    currency\n    customerFunnelsOverView {\n      name\n      organicCount\n      paidCount\n      totalCount\n      costPer\n      currency\n    }\n    spend\n  }\n}\n"): (typeof documents)["\nquery GetChannelPerformanceDeepDiveOverview(\n  $dashboardId: String!,\n  $channelName: ChannelFiltersDashboardEnum!,\n  $dashboardTimeframe: DashboardTimeframe!\n  ) {\n  channelPerformanceDeepDiveOverview(\n    dashboardId: $dashboardId,\n    channelName: $channelName,\n    dashboardTimeframe: $dashboardTimeframe\n  ) {\n    currency\n    customerFunnelsOverView {\n      name\n      organicCount\n      paidCount\n      totalCount\n      costPer\n      currency\n    }\n    spend\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DashboardAcquisitionPerformance(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $funnelStageName: String\n    $channel: Channels\n  ) {\n    dashboardAcquisitionPerformance(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      funnelStageName: $funnelStageName \n      channel: $channel\n    ) {\n        startDate\n        isSetup\n        endDate\n        acquisitionPerformance {\n          date\n          count\n        }\n      }\n  }\n"): (typeof documents)["\n  query DashboardAcquisitionPerformance(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $funnelStageName: String\n    $channel: Channels\n  ) {\n    dashboardAcquisitionPerformance(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      funnelStageName: $funnelStageName \n      channel: $channel\n    ) {\n        startDate\n        isSetup\n        endDate\n        acquisitionPerformance {\n          date\n          count\n        }\n      }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDashboardActivity(\n    $dashboardId: UUID!\n    ) {\n    dashboardActivityGoal(\n      dashboardId: $dashboardId\n    ) {\n      dashboardId\n      totalNumberOfEvents\n      currentNumberOfEvents\n      completesInDays\n      isSetup\n      customerFunnelStageName\n      activityGoalProgress {\n        date\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDashboardActivity(\n    $dashboardId: UUID!\n    ) {\n    dashboardActivityGoal(\n      dashboardId: $dashboardId\n    ) {\n      dashboardId\n      totalNumberOfEvents\n      currentNumberOfEvents\n      completesInDays\n      isSetup\n      customerFunnelStageName\n      activityGoalProgress {\n        date\n        value\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDashboardBudget(\n    $dashboardId: UUID!\n    ) {\n    dashboardBudget(\n        dashboardId: $dashboardId\n    ) {\n      dashboardId\n      totalAmount\n      usedAmount\n      currency\n      recurring\n      recurringRepeat\n      renewsIn\n      isSetup\n      budgetUsage {\n        date\n        amount\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDashboardBudget(\n    $dashboardId: UUID!\n    ) {\n    dashboardBudget(\n        dashboardId: $dashboardId\n    ) {\n      dashboardId\n      totalAmount\n      usedAmount\n      currency\n      recurring\n      recurringRepeat\n      renewsIn\n      isSetup\n      budgetUsage {\n        date\n        amount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDashboardCampaigns(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $status: CampaignStatusInput!\n    $sorting: CampaignSorting!\n    $take: Int\n    $skip: Int\n  ) {\n    dashboardCampaignsList(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      status: $status\n      sorting: $sorting\n      take: $take\n      skip: $skip\n    ) {\n      hasEvents\n      totalVisits\n      totalConversions\n      totalCampaigns\n      campaigns {\n        name\n        status\n        startDate\n        endDate\n        visits\n        leads {\n          name\n          count\n        }\n        customers {\n          name\n          count\n        }\n        spend\n        cac\n        currency\n        urlSourcesImages\n        \n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDashboardCampaigns(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $status: CampaignStatusInput!\n    $sorting: CampaignSorting!\n    $take: Int\n    $skip: Int\n  ) {\n    dashboardCampaignsList(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      status: $status\n      sorting: $sorting\n      take: $take\n      skip: $skip\n    ) {\n      hasEvents\n      totalVisits\n      totalConversions\n      totalCampaigns\n      campaigns {\n        name\n        status\n        startDate\n        endDate\n        visits\n        leads {\n          name\n          count\n        }\n        customers {\n          name\n          count\n        }\n        spend\n        cac\n        currency\n        urlSourcesImages\n        \n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDashboardChanelPerformance(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $channelPerformanceSorting: ChannelPerformanceSorting!\n  ) {\n    dashboardChannelPerformance(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      channelPerformanceSorting: $channelPerformanceSorting\n    ) {\n      channelsPerformance {\n        stageName\n        name\n        count\n        stageId\n        channels {\n          name\n          currency\n          count\n          spend\n          perStage\n        }\n      }\n      hasEvents\n      isSetup\n    }\n  }\n"): (typeof documents)["\n  query GetDashboardChanelPerformance(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $channelPerformanceSorting: ChannelPerformanceSorting!\n  ) {\n    dashboardChannelPerformance(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      channelPerformanceSorting: $channelPerformanceSorting\n    ) {\n      channelsPerformance {\n        stageName\n        name\n        count\n        stageId\n        channels {\n          name\n          currency\n          count\n          spend\n          perStage\n        }\n      }\n      hasEvents\n      isSetup\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDashboardCustomerJourney(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n  ) {\n    dashboardCustomerJourney(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n    ) {\n      dashboardId\n      journeys {\n        id\n        name\n        events {\n          id\n          name\n        }\n        conversionEvents\n        conversionEventsPercentage\n      }\n      hasEvents\n      isSetup\n      period\n    }\n  }\n"): (typeof documents)["\n  query GetDashboardCustomerJourney(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n  ) {\n    dashboardCustomerJourney(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n    ) {\n      dashboardId\n      journeys {\n        id\n        name\n        events {\n          id\n          name\n        }\n        conversionEvents\n        conversionEventsPercentage\n      }\n      hasEvents\n      isSetup\n      period\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetOrganization($organizationId: UUID!) {\n  organization(id: $organizationId) {\n    id\n    defaultWebsiteId\n    companyIndustryId\n    name\n    companySizeId\n    imageUrl\n    user {\n      firstName\n      lastName\n      id\n      email\n    }\n  }\n}\n"): (typeof documents)["\nquery GetOrganization($organizationId: UUID!) {\n  organization(id: $organizationId) {\n    id\n    defaultWebsiteId\n    companyIndustryId\n    name\n    companySizeId\n    imageUrl\n    user {\n      firstName\n      lastName\n      id\n      email\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDashboardOverview(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n  ) {\n    dashboardOverview(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n    ) {\n      startDate\n      endDate\n      leads {\n        count\n        name\n      }\n      conversion\n      cac\n      websiteConversionRate\n      cacCurrency\n      newCustomers {\n        count\n        name\n      }\n      status\n      isSetup\n      hasEvents\n    }\n  }\n"): (typeof documents)["\n  query GetDashboardOverview(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n  ) {\n    dashboardOverview(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n    ) {\n      startDate\n      endDate\n      leads {\n        count\n        name\n      }\n      conversion\n      cac\n      websiteConversionRate\n      cacCurrency\n      newCustomers {\n        count\n        name\n      }\n      status\n      isSetup\n      hasEvents\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDashboardWebsiteActivity(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $pageViewsSorting: PageViewsSorting!\n    $take: Int\n  ) {\n    dashboardWebsiteActivity(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      pageViewsSorting: $pageViewsSorting\n      take: $take\n    ) {\n      domain\n      websiteImageUrl\n      conversionRate\n      totalSources\n      hasEvents\n      pageViews {\n        page\n        views\n        conversions\n      }\n      sources {\n        name\n        imageUrl\n        conversions\n      }\n      traffic {\n        pageViews\n        date\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDashboardWebsiteActivity(\n    $dashboardId: UUID!\n    $dashboardTimeframe: DashboardTimeframe!\n    $pageViewsSorting: PageViewsSorting!\n    $take: Int\n  ) {\n    dashboardWebsiteActivity(\n      dashboardId: $dashboardId\n      dashboardTimeframe: $dashboardTimeframe\n      pageViewsSorting: $pageViewsSorting\n      take: $take\n    ) {\n      domain\n      websiteImageUrl\n      conversionRate\n      totalSources\n      hasEvents\n      pageViews {\n        page\n        views\n        conversions\n      }\n      sources {\n        name\n        imageUrl\n        conversions\n      }\n      traffic {\n        pageViews\n        date\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetWebsites( \n        $before: String\n        $after: String\n        $first: Int\n        $last: Int\n        $sorting: Sorting\n        $filters: WebsitesFiltersInput\n    ) {\n        websites(before: $before, after: $after, first: $first, last: $last, sorting: $sorting, filters: $filters) {\n            edges {\n    \t\t    node {\n                    id\n                    name\n                    defaultDashboardId\n                    imageUrl\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetWebsites( \n        $before: String\n        $after: String\n        $first: Int\n        $last: Int\n        $sorting: Sorting\n        $filters: WebsitesFiltersInput\n    ) {\n        websites(before: $before, after: $after, first: $first, last: $last, sorting: $sorting, filters: $filters) {\n            edges {\n    \t\t    node {\n                    id\n                    name\n                    defaultDashboardId\n                    imageUrl\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDashboard(\n    $dashboardId: UUID!\n  ) {\n    dashboard(\n      id: $dashboardId\n    ) {\n      id\n      websiteId\n      name\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetDashboard(\n    $dashboardId: UUID!\n  ) {\n    dashboard(\n      id: $dashboardId\n    ) {\n      id\n      websiteId\n      name\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDashboards(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sorting: Sorting\n    $filters: DashboardsFiltersInput\n  ) {\n    dashboards(\n      first: $first\n      after: $after\n      last: $last\n      before: $before\n      sorting: $sorting\n      filters: $filters\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          websiteId\n          name\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDashboards(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sorting: Sorting\n    $filters: DashboardsFiltersInput\n  ) {\n    dashboards(\n      first: $first\n      after: $after\n      last: $last\n      before: $before\n      sorting: $sorting\n      filters: $filters\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          websiteId\n          name\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FunnelPerformanceDeepDiveConversionDetails(\n    $dashboardId: String!,\n    $firstPageVisited: String!,\n    $dashboardTimeframe: DashboardTimeframe!,\n    $customerFunnelId: UUID!,\n    $sourceUrl: String,\n    $take: Int,\n    $skip: Int!\n  ) {\n    funnelPerformanceDeepDiveConversionDetails(\n      dashboardId: $dashboardId,\n      firstPageVisited: $firstPageVisited,\n      dashboardTimeframe: $dashboardTimeframe,\n      customerFunnelId: $customerFunnelId,\n      sourceUrl: $sourceUrl,\n      take: $take,\n      skip: $skip\n    ) {\n      totalFunnelPerformanceConversionEvents\n      totalSearchTerms\n      funnelName\n      funnelPerformanceConversionEvents {\n        region\n        email\n        firstPageVisited\n        searchTerm\n        channel\n        timestamp\n      }\n    }\n  }\n"): (typeof documents)["\n  query FunnelPerformanceDeepDiveConversionDetails(\n    $dashboardId: String!,\n    $firstPageVisited: String!,\n    $dashboardTimeframe: DashboardTimeframe!,\n    $customerFunnelId: UUID!,\n    $sourceUrl: String,\n    $take: Int,\n    $skip: Int!\n  ) {\n    funnelPerformanceDeepDiveConversionDetails(\n      dashboardId: $dashboardId,\n      firstPageVisited: $firstPageVisited,\n      dashboardTimeframe: $dashboardTimeframe,\n      customerFunnelId: $customerFunnelId,\n      sourceUrl: $sourceUrl,\n      take: $take,\n      skip: $skip\n    ) {\n      totalFunnelPerformanceConversionEvents\n      totalSearchTerms\n      funnelName\n      funnelPerformanceConversionEvents {\n        region\n        email\n        firstPageVisited\n        searchTerm\n        channel\n        timestamp\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FunnelPerformanceDeepDive(\n    $dashboardId: String!,\n    $dashboardTimeframe: DashboardTimeframe!,\n    $customerFunnelId: UUID!,\n    $isFromCache: Boolean!,\n    $take: Int,\n    $skip: Int!,\n    $funnelPerformanceSorting: FunnelPerformanceSorting!\n  ) {\n    funnelPerformanceDeepDive(\n      dashboardId: $dashboardId,\n      dashboardTimeframe: $dashboardTimeframe,\n      customerFunnelId: $customerFunnelId,\n      isFromCache: $isFromCache,\n      take: $take,\n      skip: $skip,\n      funnelPerformanceSorting: $funnelPerformanceSorting\n    ) {\n      totalEvents\n      totalConversions\n      funnelName\n      totalFunnelPerformanceConversions\n      funnelPerformanceConversions {\n        sourceUrl\n        urlSourceImage\n        firstPageVisited\n        conversions\n      }\n    }\n  }\n"): (typeof documents)["\n  query FunnelPerformanceDeepDive(\n    $dashboardId: String!,\n    $dashboardTimeframe: DashboardTimeframe!,\n    $customerFunnelId: UUID!,\n    $isFromCache: Boolean!,\n    $take: Int,\n    $skip: Int!,\n    $funnelPerformanceSorting: FunnelPerformanceSorting!\n  ) {\n    funnelPerformanceDeepDive(\n      dashboardId: $dashboardId,\n      dashboardTimeframe: $dashboardTimeframe,\n      customerFunnelId: $customerFunnelId,\n      isFromCache: $isFromCache,\n      take: $take,\n      skip: $skip,\n      funnelPerformanceSorting: $funnelPerformanceSorting\n    ) {\n      totalEvents\n      totalConversions\n      funnelName\n      totalFunnelPerformanceConversions\n      funnelPerformanceConversions {\n        sourceUrl\n        urlSourceImage\n        firstPageVisited\n        conversions\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GeneratePixelScript(\n    $websiteId: UUID!\n  ) {\n    generatePixelScript(\n      id: $websiteId\n    )\n  }\n"): (typeof documents)["\n  query GeneratePixelScript(\n    $websiteId: UUID!\n  ) {\n    generatePixelScript(\n      id: $websiteId\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetMe {\n  me {\n\t\tid\n\t\temail\n\t\tfirstName\n\t\tlastName\n\t\tcompanyRoleId\n\t\tcompanyIndustryId\n\t\tcompanySizeId\n\t\tdefaultOrganizationId\n\t\tcurrentOnboardingPath\n\t\tcreatedAt\n\t\tupdatedAt\n\t\tpermissions {\n\t\t\torganizationId\n\t\t\taccessLevel\n\t\t\tdashboardId\n\t\t\twebsiteId\n\t\t}\n\t\timageUrl\n  }\n}\n"): (typeof documents)["\nquery GetMe {\n  me {\n\t\tid\n\t\temail\n\t\tfirstName\n\t\tlastName\n\t\tcompanyRoleId\n\t\tcompanyIndustryId\n\t\tcompanySizeId\n\t\tdefaultOrganizationId\n\t\tcurrentOnboardingPath\n\t\tcreatedAt\n\t\tupdatedAt\n\t\tpermissions {\n\t\t\torganizationId\n\t\t\taccessLevel\n\t\t\tdashboardId\n\t\t\twebsiteId\n\t\t}\n\t\timageUrl\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetFunnelStages(\n    $dashboardId: UUID!\n    $first: Int!\n    ) {\n    customerFunnelStages(dashboardId: $dashboardId first: $first) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunnelStages(\n    $dashboardId: UUID!\n    $first: Int!\n    ) {\n    customerFunnelStages(dashboardId: $dashboardId first: $first) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOnboardingGoals($dashboardId: String!) {\n    activityGoals(filters: { dashboardId: { eq: $dashboardId }} first: 1) \n    {\n        edges {\n            node {\n                id\n                numberOfEvents\n                customerFunnelStageId\n\t        }\n        }\n    }\n\tbudgetGoals(filters: { dashboardId: { eq: $dashboardId}}, first: 1) {\n\t\tedges {\n\t\t\tnode {\n          id\n\t\t\t    currency\n          recurring\n          value\n          recurringRepeat\n\t\t    }\n\t    }\n\t}\n  }\n"): (typeof documents)["\n  query GetOnboardingGoals($dashboardId: String!) {\n    activityGoals(filters: { dashboardId: { eq: $dashboardId }} first: 1) \n    {\n        edges {\n            node {\n                id\n                numberOfEvents\n                customerFunnelStageId\n\t        }\n        }\n    }\n\tbudgetGoals(filters: { dashboardId: { eq: $dashboardId}}, first: 1) {\n\t\tedges {\n\t\t\tnode {\n          id\n\t\t\t    currency\n          recurring\n          value\n          recurringRepeat\n\t\t    }\n\t    }\n\t}\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetOrganizations(\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $sorting: Sorting\n    $filters: OrganizationsFiltersInput) {\n    organizations(before: $before, after: $after, first: $first, last: $last, sorting: $sorting, filters: $filters) {\n    \tedges {\n    \t\tnode {\n    \t\t\tid\n    \t\t\tname\n                companySizeId\n                companyIndustryId\n                imageUrl\n                defaultWebsiteId\n                website {\n                    defaultDashboardId\n                }\n    \t\t}\n    \t}\n    }\n}\n"): (typeof documents)["\nquery GetOrganizations(\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $sorting: Sorting\n    $filters: OrganizationsFiltersInput) {\n    organizations(before: $before, after: $after, first: $first, last: $last, sorting: $sorting, filters: $filters) {\n    \tedges {\n    \t\tnode {\n    \t\t\tid\n    \t\t\tname\n                companySizeId\n                companyIndustryId\n                imageUrl\n                defaultWebsiteId\n                website {\n                    defaultDashboardId\n                }\n    \t\t}\n    \t}\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetStage(\n    $id: UUID!\n    ) {\n    customerFunnelStage(id: $id) {\n\t\tid\n\t\tdashboardId\n\t\tcustomerFunnelStageEvents {\n\t\t\tid\n\t\t\tcustomerFunnelStageId\n\t\t\tname\n\t\t\teventType\n\t\t\tcustomerFunnelStageEventConditions {\n\t\t\t\tid\n\t\t\t\tcustomerFunnelStageEventId\n\t\t\t\tpageUrl\n\t\t\t\tvisitorType\n\t\t\t\tstartingUrl\n\t\t\t\tstartingUrlCondition\n\t\t\t\tdestinationUrl\n\t\t\t\tdestinationUrlCondition\n\t\t\t}\n\t\t}\n\t\tname\n\t\tcreatedAt\n\t\tupdatedAt\n\t}\n  }\n"): (typeof documents)["\n  query GetStage(\n    $id: UUID!\n    ) {\n    customerFunnelStage(id: $id) {\n\t\tid\n\t\tdashboardId\n\t\tcustomerFunnelStageEvents {\n\t\t\tid\n\t\t\tcustomerFunnelStageId\n\t\t\tname\n\t\t\teventType\n\t\t\tcustomerFunnelStageEventConditions {\n\t\t\t\tid\n\t\t\t\tcustomerFunnelStageEventId\n\t\t\t\tpageUrl\n\t\t\t\tvisitorType\n\t\t\t\tstartingUrl\n\t\t\t\tstartingUrlCondition\n\t\t\t\tdestinationUrl\n\t\t\t\tdestinationUrlCondition\n\t\t\t}\n\t\t}\n\t\tname\n\t\tcreatedAt\n\t\tupdatedAt\n\t}\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetOrganizationPermissions(\n        $filters: PermissionsFiltersInput, \n        $first: Int, \n        $last: Int, \n        $before: String, \n        $after: String, \n        $sorting: Sorting,\n        $take: Int, \n        $skip: Int\n        ) \n        {\n            permissions (\n              first: $first\n              last: $last\n              before: $before\n              after: $after\n              sorting: $sorting\n              filters: $filters\n              take: $take\n              skip: $skip\n              ) {\n              totalTeamMembers\n              edges {\n                node {\n                  id\n                  invitationStatus\n                  accessLevel\n                  userId\n                  user {\n                    id\n                    firstName\n                    lastName\n                    email\n                  }\n                }\n              }\n            }\n        }\n"): (typeof documents)["\n    query GetOrganizationPermissions(\n        $filters: PermissionsFiltersInput, \n        $first: Int, \n        $last: Int, \n        $before: String, \n        $after: String, \n        $sorting: Sorting,\n        $take: Int, \n        $skip: Int\n        ) \n        {\n            permissions (\n              first: $first\n              last: $last\n              before: $before\n              after: $after\n              sorting: $sorting\n              filters: $filters\n              take: $take\n              skip: $skip\n              ) {\n              totalTeamMembers\n              edges {\n                node {\n                  id\n                  invitationStatus\n                  accessLevel\n                  userId\n                  user {\n                    id\n                    firstName\n                    lastName\n                    email\n                  }\n                }\n              }\n            }\n        }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query IsWebsiteConnected($websiteId: UUID!) {\n    isWebsiteConnected(websiteId: $websiteId)\n  }\n"): (typeof documents)["\n  query IsWebsiteConnected($websiteId: UUID!) {\n    isWebsiteConnected(websiteId: $websiteId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query IsHubspotConnected($websiteId: UUID!) {\n    isHubspotConnected(websiteId: $websiteId)\n  }\n"): (typeof documents)["\n  query IsHubspotConnected($websiteId: UUID!) {\n    isHubspotConnected(websiteId: $websiteId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetNotifications(\n\t\t$websiteId: String!\n\t\t$take: Int\n\t\t$skip: Int\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n\t) {\n  notifications(\n\t\tfilters: {\n      websiteId: {\n        eq: $websiteId\n      }\n    }\n    take: $take\n    skip: $skip\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n  ) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      cursor\n      node {\n        id\n        websiteId\n        notificationType\n        title\n        message\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n"): (typeof documents)["\n  query GetNotifications(\n\t\t$websiteId: String!\n\t\t$take: Int\n\t\t$skip: Int\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n\t) {\n  notifications(\n\t\tfilters: {\n      websiteId: {\n        eq: $websiteId\n      }\n    }\n    take: $take\n    skip: $skip\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n  ) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      cursor\n      node {\n        id\n        websiteId\n        notificationType\n        title\n        message\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Selectors($websiteId: String!) {\n    selectors(websiteId: $websiteId) {\n      createdAt\n      id\n      link\n      querySelector\n      updatedAt\n      websiteId\n    }\n  }\n"): (typeof documents)["\n  query Selectors($websiteId: String!) {\n    selectors(websiteId: $websiteId) {\n      createdAt\n      id\n      link\n      querySelector\n      updatedAt\n      websiteId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetWebsite($id: UUID!) {\n    website(id: $id) {\n      organizationId\n      snippetUrl\n      domain\n      id\n      id\n      organizationId\n      name\n      domain\n      description\n      snippetUrl\n      scriptUrl\n      imageUrl\n      pixelScriptGenerationStatus\n      defaultDashboardId\n      createdAt\n      updatedAt    \n      hubspotIntegrationStatus\n      salesforceIntegrationStatus\n      metaAdsIntegrationStatus\n      googleAdsIntegrationStatus\n      organization {\n        name\n      }\n      user {\n        firstName\n        lastName\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetWebsite($id: UUID!) {\n    website(id: $id) {\n      organizationId\n      snippetUrl\n      domain\n      id\n      id\n      organizationId\n      name\n      domain\n      description\n      snippetUrl\n      scriptUrl\n      imageUrl\n      pixelScriptGenerationStatus\n      defaultDashboardId\n      createdAt\n      updatedAt    \n      hubspotIntegrationStatus\n      salesforceIntegrationStatus\n      metaAdsIntegrationStatus\n      googleAdsIntegrationStatus\n      organization {\n        name\n      }\n      user {\n        firstName\n        lastName\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription WebsiteUpdated(\n    $websiteId: UUID!\n  ) {\n    websiteUpdated(websiteId: $websiteId) {\n      id\n      organizationId\n      name\n      domain\n      description\n      snippetUrl\n      scriptUrl\n      imageUrl\n      pixelScriptGenerationStatus\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription WebsiteUpdated(\n    $websiteId: UUID!\n  ) {\n    websiteUpdated(websiteId: $websiteId) {\n      id\n      organizationId\n      name\n      domain\n      description\n      snippetUrl\n      scriptUrl\n      imageUrl\n      pixelScriptGenerationStatus\n      createdAt\n      updatedAt\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;